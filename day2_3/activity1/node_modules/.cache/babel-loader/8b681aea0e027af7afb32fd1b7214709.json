{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/willfoody/Documents/Repositories/Week10/day2/activity1/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n\nclass Stepper extends Component {\n  constructor() {\n    // make sure to call the constructor of the parent (Component)\n    super(); //this.counterValue = 0 \n    //console.log(this) // the value of this is NOT undefined \n    // We are providing the value of this at a time when it was not undefined to the handleIncrement function \n    //this.handleIncrement = this.handleIncrement.bind(this)\n    // STATE \n    // Every time you will update the state \n    // it will automatically call RENDER \n\n    this.lowerIncrement = () => {\n      // update the state and increment the counter \n      //this.state.counter += 1 // DON'T DO THIS \n      // setState is async operation, which means it will eventually update the state  \n      this.setState({\n        stepper: this.state.stepper - 1\n      }, () => {\n        // OPTIONAL: Fired when the state has been updated \n        console.log('INSIDE STATE CALLBACK');\n        console.log(this.state.stepper);\n      });\n      console.log(this.state.stepper); //this.counterValue += 1 \n      //console.log(this.counterValue)\n    };\n\n    this.handleIncrement = () => {\n      // update the state and increment the counter \n      //this.state.counter += 1 // DON'T DO THIS \n      // setState is async operation, which means it will eventually update the state  \n      this.setState({\n        stepper: this.state.stepper + 1\n      }, () => {\n        // OPTIONAL: Fired when the state has been updated \n        console.log('INSIDE STATE CALLBACK');\n        console.log(this.state.stepper);\n      });\n      console.log(this.state.stepper); //this.counterValue += 1 \n      //console.log(this.counterValue)\n    };\n\n    this.state = {\n      stepper: 91\n    };\n  }\n\n  /*\n  handleIncrement() {\n      console.log(this)\n     // this.counterValue += 1 \n     // console.log(this.counterValue)\n  } */\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stepper\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.lowerIncrement,\n        id: \"lowerButton\",\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: this.state.stepper\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleIncrement,\n        id: \"higherButton\",\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Stepper;","map":{"version":3,"sources":["/Users/willfoody/Documents/Repositories/Week10/day2/activity1/src/App.js"],"names":["React","Component","Stepper","constructor","lowerIncrement","setState","stepper","state","console","log","handleIncrement","render"],"mappings":";;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;;AAEA,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAE5BE,EAAAA,WAAW,GAAG;AACV;AACA,YAFU,CAGV;AAEA;AAEA;AACA;AAEA;AACA;AACA;;AAZU,SAmBdC,cAnBc,GAmBG,MAAM;AAErB;AACA;AAEA;AACA,WAAKC,QAAL,CAAc;AACVC,QAAAA,OAAO,EAAE,KAAKC,KAAL,CAAWD,OAAX,GAAqB;AADpB,OAAd,EAEE,MAAM;AACJ;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,KAAL,CAAWD,OAAvB;AACH,OAND;AAQAE,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,KAAL,CAAWD,OAAvB,EAdqB,CAgBrB;AACA;AACH,KArCe;;AAAA,SAwCdI,eAxCc,GAwCI,MAAM;AAEpB;AACA;AAEA;AACA,WAAKL,QAAL,CAAc;AACVC,QAAAA,OAAO,EAAE,KAAKC,KAAL,CAAWD,OAAX,GAAqB;AADpB,OAAd,EAEE,MAAM;AACJ;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,KAAL,CAAWD,OAAvB;AACH,OAND;AAQAE,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,KAAL,CAAWD,OAAvB,EAdoB,CAgBpB;AACA;AACH,KA1Da;;AAaV,SAAKC,KAAL,GAAa;AACTD,MAAAA,OAAO,EAAE;AADA,KAAb;AAIH;;AA2CD;AACJ;AACA;AACA;AACA;AACA;AAEIK,EAAAA,MAAM,GAAG;AAEL,wBAEI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACI;AAAQ,QAAA,OAAO,EAAE,KAAKP,cAAtB;AAAsC,QAAA,EAAE,EAAC,aAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAK,KAAKG,KAAL,CAAWD;AAAhB;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAQ,QAAA,OAAO,EAAE,KAAKI,eAAtB;AAAuC,QAAA,EAAE,EAAC,cAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAQH;;AA/E2B;;AAmFhC,eAAeR,OAAf","sourcesContent":["\nimport React, { Component } from 'react'\nimport './App.css'\n\nclass Stepper extends Component {\n\n    constructor() {\n        // make sure to call the constructor of the parent (Component)\n        super()\n        //this.counterValue = 0 \n\n        //console.log(this) // the value of this is NOT undefined \n\n        // We are providing the value of this at a time when it was not undefined to the handleIncrement function \n        //this.handleIncrement = this.handleIncrement.bind(this)\n\n        // STATE \n        // Every time you will update the state \n        // it will automatically call RENDER \n        this.state = {\n            stepper: 91, \n        }\n\n    }\n\n    lowerIncrement = () => {\n\n      // update the state and increment the counter \n      //this.state.counter += 1 // DON'T DO THIS \n\n      // setState is async operation, which means it will eventually update the state  \n      this.setState({\n          stepper: this.state.stepper - 1 \n      },() => {\n          // OPTIONAL: Fired when the state has been updated \n          console.log('INSIDE STATE CALLBACK')\n          console.log(this.state.stepper)\n      })\n\n      console.log(this.state.stepper)\n\n      //this.counterValue += 1 \n      //console.log(this.counterValue)\n  }\n    \n    \n    handleIncrement = () => {\n\n        // update the state and increment the counter \n        //this.state.counter += 1 // DON'T DO THIS \n\n        // setState is async operation, which means it will eventually update the state  \n        this.setState({\n            stepper: this.state.stepper + 1 \n        },() => {\n            // OPTIONAL: Fired when the state has been updated \n            console.log('INSIDE STATE CALLBACK')\n            console.log(this.state.stepper)\n        })\n\n        console.log(this.state.stepper)\n\n        //this.counterValue += 1 \n        //console.log(this.counterValue)\n    }\n    \n    /*\n    handleIncrement() {\n        console.log(this)\n       // this.counterValue += 1 \n       // console.log(this.counterValue)\n    } */\n\n    render() {\n\n        return (\n\n            <div className=\"stepper\">\n                <button onClick={this.lowerIncrement} id='lowerButton'>-</button>\n                <h1>{this.state.stepper}</h1>\n                <button onClick={this.handleIncrement} id='higherButton'>+</button>\n            </div>\n        )\n    }\n\n}\n\nexport default Stepper"]},"metadata":{},"sourceType":"module"}